#!/usr/bin/env python3

import argparse
import requests
import sys

def main():
    parser = argparse.ArgumentParser(description='TIG Algorithm Lister')
    parser.add_argument('challenge', help="Name of challenge")
    
    args = parser.parse_args()

    api_url = f"https://hackathon-api.tig.foundation"
    block = requests.get(f"{api_url}/get-block").json()["block"]
    challenges = requests.get(f"{api_url}/get-challenges?block_id={block['id']}").json()["challenges"]
    data = requests.get(f"{api_url}/get-algorithms?block_id={block['id']}").json()
    algorithms = data["codes"]
    compile_success = {x['algorithm_id']: x['details']['compile_success'] for x in data['binarys']}

    c_id = next(
        (
            c['id'] for c in challenges
            if c['details']['name'] == args.challenge
        ),
        None
    )
    if c_id is None:
        print(f"Challenge '{args.challenge}' not found.")
        sys.exit(1)
    
    algorithms = sorted([
        a for a in algorithms if a['details']['challenge_id'] == c_id
    ], key=lambda x: x['id'])

    for a in algorithms:
        if a["id"] not in compile_success:
            status = f"pending compilation"
        elif not compile_success[a["id"]]:
            status = f"failed to compile"
        elif a["state"]["round_active"] <= block["details"]["round"]:
            status = f"active"
        elif a["state"]["round_pushed"] <= block["details"]["round"]:
            status = f"active from round {a['state']['round_active']}"
        else:
            status = f"pushed from round {a['state']['round_pushed']}"
        a_name = a['details']['name']
        git_url = f"https://github.com/tig-foundation/tig-hackathon/blob/{args.challenge}/{a_name}/tig-algorithms/src/{args.challenge}/{a_name}/mod.rs"
        print(f"id: {a['id']:<12} name: {a_name:<20} status: {status:<20} code: {git_url}")

if __name__ == "__main__":
    main()